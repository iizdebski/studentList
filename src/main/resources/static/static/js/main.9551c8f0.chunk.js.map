{"version":3,"sources":["client.js","ComponentFooter.js","forms/AddStudentForm.js","Notification.js","forms/EditStudentForm.js","ComponentMain.js","App.js","serviceWorker.js","index.js"],"names":["checkStatus","response","ok","error","Error","statusText","json","then","e","Promise","reject","ComponentFooter","props","Container","fluid","className","undefined","numberOfStudents","style","backgroundColor","marginRight","size","onClick","handleAddStudentClick","type","inputBottomMargin","marginBottom","tagStyle","color","AddStudentForm","initialValues","firstName","lastName","email","gender","validate","values","errors","test","includes","onSubmit","student","setSubmitting","fetch","headers","method","body","JSON","stringify","addNewStudent","onSuccess","catch","err","onFailure","finally","touched","handleChange","handleBlur","handleSubmit","isSubmitting","submitForm","isValid","name","onChange","onBlur","value","placeholder","disabled","openNotification","message","description","notification","errorNotification","inputMarginY","margin","EditStudentForm","this","submitter","console","log","Component","ComponentMain","openAddStudentModal","setState","isAddStudentModalVisible","closeAddStudentModal","openStudentCourseModal","isStudentCourseModalVisible","closeStudentCourseModal","openEditStudentModal","isEditStudentModalVisible","closeEditStudentModal","openNotificationWithIcon","handleOnIdClick","studentId","getAllStudentCourses","res","studentCourses","desc","deleteStudent","fetchStudents","status","editStudent","selectedStudent","updateStudentFormSubmitter","updateStudent","state","students","isFetching","bind","commonElements","title","visible","onOk","onCancel","footer","width","length","map","course","index","key","bordered","Item","label","span","courseId","department","teacherName","startDate","endDate","grade","httpStatus","destroyOnClose","indicator","LoadingOutlined","fontSize","spin","columns","render","text","charAt","toUpperCase","dataIndex","record","icon","QuestionCircleOutlined","placement","okText","cancelText","onConfirm","stopPropagation","danger","dataSource","rowKey","pagination","App","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.9551c8f0.chunk.js","sourcesContent":["import fetch from 'unfetch';\n\n\nconst checkStatus = response => {\n   if ( response.ok ) {\n      return response;\n   } else {\n      let error = new Error(response.statusText);  // Attach the 'actual' error.\n      error.response = response;\n      response.json().then(e => {\n         error.error = e;\n      });\n\n      return Promise.reject(error); // Promise returned with 'error-obj' parsed.\n   }\n};\n\n// GET: ALL students\nexport const getAllStudents = () =>\n    fetch('/api/students')\n        .then(checkStatus);\n\n// GET: ALL Student Courses\nexport const getAllStudentCourses = studentId =>\n    fetch(`/api/students/${ studentId }/courses`)\n        .then(checkStatus);\n\n// POST: ADD 1 student\nexport const addNewStudent = student =>\n    fetch('/api/students', {\n       headers: {\n          'Content-Type': 'application/json'\n       },\n       method: 'POST',\n       body: JSON.stringify(student)   // value 'body:' is the object which @RequestBody(StudentController) annotation gets\n\n    }).then(checkStatus);\n\n// PUT: Update a Student\nexport const updateStudent = (studentId, student) =>\n    fetch(`api/students/${studentId}`, {\n       headers: {\n          'Content-Type': 'application/json'\n       },\n       method: 'PUT',\n       body: JSON.stringify(student)\n    })\n        .then(checkStatus);\n\n// DELETE: by Id\nexport const deleteStudent = studentId =>\n    fetch(`api/students/${ studentId }`, {\n       method: 'DELETE'\n    })\n        .then(checkStatus);\n","import React from \"react\";\nimport { Container } from \"react-bootstrap\";\nimport { Avatar, Button } from \"antd\";\nimport './ComponentFooter.css';\n\nconst ComponentFooter = ( props ) => (\n    <div>\n        <Container fluid className=\"footer text-center\">\n            {\n                props.numberOfStudents !== undefined ? // changed to 'if undefined' to make '0' invalid too, and returns 'null'\n                    <Avatar\n                        style={ { backgroundColor: '#f56a00', marginRight: '5px' } }\n                        size='large'>\n                        { props.numberOfStudents }\n                    </Avatar>\n                    : null\n            }\n            <Button onClick={ props.handleAddStudentClick } type='primary'>\n                Add New Student +\n            </Button>\n        </Container>\n    </div>\n);\n\n\nexport default ComponentFooter\n\n","import React from 'react';\nimport { Formik } from 'formik';\nimport { Input, Button, Tag } from 'antd';\nimport { addNewStudent } from '../client';\n\nconst inputBottomMargin = {marginBottom: '10px'};\nconst tagStyle = {backgroundColor: '#f50', color: 'white', ...inputBottomMargin};\n\nconst AddStudentForm = (props) =>  (        \n     <Formik\n       initialValues={{ firstName: '', lastName: '', email: '', gender: '' }}\n       validate={values => {\n         const errors = {};\n\n         if (!values.firstName) {\n          errors.firstName = 'First Name Required'\n        }       \n\n        if (!values.lastName) {\n          errors.lastName = 'Last Name Required'\n        }\n\n         if (!values.email) {\n           errors.email = 'Email Required';\n         } else if (\n           !/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,}$/i.test(values.email)\n         ) {\n           errors.email = 'Invalid email address';\n         }         \n\n         if (!values.gender) {\n           errors.gender = \"Gender Required\"\n         } else if (!['MALE', 'male', 'FEMALE', 'female'].includes(values.gender)\n         ) {\n           errors.gender = 'Gender must be (MALE, male, FEMALE, female)';\n         }     \n         return errors;\n       }}\n       onSubmit={(student, { setSubmitting }) => {      \n         addNewStudent(student).then(() => {\n           props.onSuccess();                                        \n         })\n         .catch(err => {\n           props.onFailure(err);\n         })\n         .finally(() => {\n           setSubmitting(false);\n         })\n       }}>         \n       {({\n         values,\n         errors,\n         touched,\n         handleChange,\n         handleBlur,\n         handleSubmit,\n         isSubmitting,\n         submitForm,\n         isValid\n         /* and other goodies */\n       }) => (\n         <form onSubmit={handleSubmit}>\n           <Input    \n             style={inputBottomMargin}    \n             name=\"firstName\"\n             onChange={handleChange}\n             onBlur={handleBlur}\n             value={values.firstName}\n             placeholder='First name. E.g John'\n           />\n           {errors.firstName && touched.firstName && \n           <Tag style={tagStyle}>{errors.firstName}</Tag>}\n           <Input      \n             style={inputBottomMargin}      \n             name=\"lastName\"\n             onChange={handleChange}\n             onBlur={handleBlur}\n             value={values.lastName}\n             placeholder='Last name. E.g Smith'\n           />\n           {errors.lastName && touched.lastName &&\n           <Tag style={tagStyle}>{errors.lastName}</Tag>}\n           <Input   \n             style={inputBottomMargin}         \n             name=\"email\"       \n             onChange={handleChange}\n             onBlur={handleBlur}\n             value={values.email}\n             placeholder='Email. E.g example@gmail.com'\n           />\n           {errors.email && touched.email && \n           <Tag style={tagStyle}>{errors.email}</Tag>}      \n           <Input    \n             style={inputBottomMargin}        \n             name=\"gender\"          \n             onChange={handleChange}\n             onBlur={handleBlur}\n             value={values.gender}\n             placeholder='Gender. E.g Male or Female'\n           />\n           {errors.gender && touched.gender && \n            <Tag style={tagStyle}>{errors.gender}</Tag>}           \n           <Button \n           onClick={() => submitForm()} \n           type=\"submit\" \n           disabled={isSubmitting | (touched && !isValid)}>\n             Submit\n           </Button>\n         </form>\n       )}\n     </Formik>\n    );    \n\nexport default AddStudentForm;","import { notification } from 'antd';\n\nconst openNotification = ( type, message, description ) => {\n    notification[type]({\n      message,\n      description        \n    });\n  };\n\n  export const successNotification = (message, description) =>\n     openNotification('success', message, description);\n\n  export const infoNotification = (message, description) =>\n     openNotification('info', message, description);\n\n  export const warningNotification = (message, description) =>\n     openNotification('warning', message, description);\n\n  export const errorNotification = (message, description) =>\n     openNotification('error', message, description);","import React, { Component } from 'react';\r\nimport { Formik } from 'formik';\r\nimport Text from \"antd/lib/typography/Text\";\r\nimport { Input, Button} from 'antd';\r\n\r\n\r\nconst inputMarginY = { margin: '5px 0' };\r\n\r\nclass EditStudentForm extends Component {\r\n   render() {\r\n      const { submitter, initialValues } = this.props;\r\n\r\n      return (\r\n          <Formik\r\n              initialValues={ initialValues }\r\n              validate={ values => {\r\n                 let errors = {};\r\n                 if ( !values.email ) {\r\n                    errors.email = 'Required';\r\n                 } else if (\r\n                     !/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,}$/i.test(values.email)\r\n                 ) {\r\n                    errors.email = 'Invalid email address';\r\n                 }\r\n                 if ( !values.firstName ) {\r\n                    errors.firstName = 'First name required';\r\n                 }\r\n                 if ( !values.lastName ) {\r\n                    errors.lastName = 'Last name required';\r\n                 }\r\n                 return errors;\r\n              } }\r\n\r\n              // Handles onSubmit :\r\n              onSubmit={ ( values, { setSubmitting } ) => {\r\n                 console.log(values); // values has Selected Student Record\r\n                 submitter(values);\r\n                 setSubmitting(false);\r\n              } }\r\n          >\r\n             { ( {\r\n                    values,\r\n                    errors,\r\n                    touched,\r\n                    handleChange,\r\n                    isValid,\r\n                    handleBlur,\r\n                    handleSubmit,\r\n                    isSubmitting,\r\n                    submitForm\r\n                    /* and other goodies */\r\n                 } ) => (\r\n                 <form onSubmit={ handleSubmit }>\r\n                    <Input\r\n                        style={ inputMarginY }\r\n                        name=\"firstName\"\r\n                        onChange={ handleChange }\r\n                        onBlur={ handleBlur }\r\n                        value={ values.firstName }\r\n                        placeholder=\"First Name. E.g. Jason\"/>\r\n\r\n                    { errors.firstName && touched.firstName &&\r\n                    <Text type=\"danger\">{ errors.firstName }</Text> }\r\n\r\n                    <Input\r\n                        style={ inputMarginY }\r\n                        name=\"lastName\"\r\n                        onChange={ handleChange }\r\n                        onBlur={ handleBlur }\r\n                        value={ values.lastName }\r\n                        placeholder=\"Last Name. E.g. Bourne\"/>\r\n                    { errors.lastName && touched.lastName &&\r\n                    <Text type=\"danger\">{ errors.lastName }</Text> }\r\n\r\n                    <Input\r\n                        style={ inputMarginY }\r\n                        type=\"email\"\r\n                        name=\"email\"\r\n                        onChange={ handleChange }\r\n                        onBlur={ handleBlur }\r\n                        value={ values.email }\r\n                        placeholder=\"Email.E.g. jasonbourne@gmail.com\"/>\r\n                    { errors.email && touched.email &&\r\n                    <Text type=\"danger\">{ errors.email }</Text> }\r\n\r\n                    <Button className=\"mt-2 d-block\"\r\n                            onClick={ () => submitForm() }\r\n                            type=\"submit\"\r\n                            disabled={ isSubmitting || ( touched && !isValid ) }>\r\n                       Submit\r\n                    </Button>\r\n                 </form>\r\n             ) }\r\n          </Formik>\r\n      )\r\n   }\r\n}\r\n\r\n\r\nexport default EditStudentForm","import React, { Component } from \"react\";\r\nimport {\r\n   deleteStudent,\r\n   getAllStudentCourses,\r\n   getAllStudents,\r\n   updateStudent\r\n} from './client';\r\nimport {\r\n   Avatar, Table,\r\n   Spin, Modal,\r\n   Empty, Button,\r\n   Popconfirm, notification,\r\n   Descriptions, PageHeader\r\n} from \"antd\";\r\nimport { LoadingOutlined, QuestionCircleOutlined } from '@ant-design/icons';\r\nimport { Container } from \"react-bootstrap\";\r\nimport ComponentFooter from \"./ComponentFooter\";\r\nimport AddStudentForm from \"./forms/AddStudentForm\";\r\nimport { errorNotification } from \"./Notification\";\r\nimport EditStudentForm from \"./forms/EditStudentForm\";\r\n\r\n\r\nconst getIndicatorIcon = () => <LoadingOutlined style={ { fontSize: 24 } } spin/>;\r\n\r\nclass ComponentMain extends Component {\r\n   constructor( props ) {\r\n      super(props);\r\n      this.state = {\r\n         students: [],\r\n         studentCourses: [],\r\n         selectedStudent: {},\r\n         isFetching: false,\r\n         isAddStudentModalVisible: false,\r\n         isStudentCourseModalVisible: false\r\n      };\r\n\r\n      this.fetchStudents = this.fetchStudents.bind(this);\r\n   }\r\n\r\n   // LIFE-CYCLE Methods :\r\n   componentDidMount() {\r\n      this.fetchStudents();\r\n   }\r\n\r\n   // MODALS :\r\n   openAddStudentModal = () => this.setState({ isAddStudentModalVisible: true });\r\n   closeAddStudentModal = () => this.setState({ isAddStudentModalVisible: false });\r\n\r\n   openStudentCourseModal = () => this.setState({ isStudentCourseModalVisible: true });\r\n   closeStudentCourseModal = () => this.setState({ isStudentCourseModalVisible: false });\r\n\r\n   openEditStudentModal = () => this.setState({ isEditStudentModalVisible: true });\r\n   closeEditStudentModal = () => this.setState({ isEditStudentModalVisible: false });\r\n\r\n   // NOTIFICATION :\r\n   openNotificationWithIcon = ( type, message, description ) => notification[type]({ message, description });\r\n\r\n   // FETCH: ALL Students :\r\n   fetchStudents() {\r\n      this.setState({ isFetching: true });\r\n      getAllStudents()\r\n          .then(res => res.json()\r\n              .then(students => {\r\n                 // console.log(students);\r\n                 this.setState({\r\n                    students,\r\n                    isFetching: false\r\n                 });\r\n              }))\r\n          .catch(error => {\r\n             // this is from Promise(checkStatus) returned in client.js :\r\n             console.log(error.error);\r\n             const message = error.error.message;\r\n             const desc = error.error.error;\r\n             errorNotification(message, desc);\r\n\r\n             this.setState({\r\n                isFetching: false\r\n             });\r\n          });\r\n   }\r\n\r\n   // GET: Student Courses : OnIdClick :\r\n   handleOnIdClick = ( studentId ) => {\r\n      getAllStudentCourses(studentId)\r\n          .then(res => res.json()\r\n              .then(studentCourses => {\r\n                 // console.log(studentCourses);\r\n                 this.setState({\r\n                    studentCourses\r\n                 });\r\n                 // console.log(`${ studentCourses.length } Course/s for student ID: ${ studentId }`);\r\n              }))\r\n          .catch(error => {\r\n             // this is from Promise(checkStatus) returned in client.js :\r\n             console.log(error.error);\r\n             const message = error.error.message;\r\n             const desc = error.error.error;\r\n             errorNotification(message, desc);\r\n          });\r\n      this.openStudentCourseModal();\r\n   };\r\n\r\n   // DELETE by Id :\r\n   deleteStudent = studentId => {\r\n      // alert(`Deleting Id : ${ studentId }`);\r\n      deleteStudent(studentId).then(() => {\r\n         this.openNotificationWithIcon('success', 'Student deleted', `Id: ${ studentId } was deleted.`);\r\n         this.fetchStudents();\r\n      }).catch(err => {\r\n         this.openNotificationWithIcon('error', 'error', `(${ err.error.status }) ${ err.error.error }`);\r\n      });\r\n   };\r\n\r\n   // EDIT: edit studentRecord\r\n   editStudent = ( selectedStudent ) => {\r\n      // console.log(selectedStudent);\r\n      this.setState({ selectedStudent });\r\n      this.openEditStudentModal()\r\n   };\r\n\r\n   // UPDATE: submit (invoked from) EditStudentForm.js\r\n   updateStudentFormSubmitter = student => {\r\n      // console.log(student);   // 'student' is 'values' from EditStudentForm\r\n      updateStudent(student.studentId, student).then(() => {\r\n         this.openNotificationWithIcon('success', 'Student updated', `${ student.studentId } was updated`);\r\n         this.closeEditStudentModal();\r\n         this.fetchStudents();\r\n      }).catch(err => {\r\n         console.error(err.error);\r\n         this.openNotificationWithIcon('error', 'error', `(${ err.error.status }) ${ err.error.error }`);\r\n      });\r\n   };\r\n\r\n\r\n   render() {\r\n\r\n      const {\r\n         students,\r\n         studentCourses,\r\n         isFetching,\r\n         isAddStudentModalVisible,\r\n         isStudentCourseModalVisible\r\n      } = this.state;\r\n\r\n      const commonElements = () => (\r\n          <>\r\n             <div>\r\n                {/*---MODAL : DISPLAY STUDENT COURSES ----*/ }\r\n                <Modal\r\n                    title={ <h3>Student Course</h3> }\r\n                    visible={ isStudentCourseModalVisible }\r\n                    onOk={ this.closeStudentCourseModal }\r\n                    onCancel={ this.closeStudentCourseModal }\r\n                    footer={ null }\r\n                    width={ 1000 }\r\n                >\r\n                   {\r\n                      !this.state.studentCourses.length < 1 ?\r\n                          <>\r\n                             {\r\n                                studentCourses.map\r\n                                (( course, index ) =>\r\n                                    <div key={ `101${ index }` }>\r\n                                       <Descriptions bordered size=\"small\">\r\n                                          <Descriptions.Item label=\"Course Id\" span={ 4 }>{ course.courseId }</Descriptions.Item>\r\n                                          <Descriptions.Item label=\"Course Name\" span={ 2 }>{ course.name }</Descriptions.Item>\r\n                                          <Descriptions.Item label=\"Department\" span={ 2 }>{ course.department }</Descriptions.Item>\r\n                                          <Descriptions.Item label=\"Course Description\" span={ 4 }>{ course.description }</Descriptions.Item>\r\n                                          <Descriptions.Item label=\"Teacher\" span={ 4 }>{ course.teacherName }</Descriptions.Item>\r\n                                          <Descriptions.Item label=\"Start Date\" span={ 2 }>{ course.startDate }</Descriptions.Item>\r\n                                          <Descriptions.Item label=\"End Date\" span={ 2 }>{ course.endDate }</Descriptions.Item>\r\n                                          <Descriptions.Item label=\"Grade\" span={ 4 }>{ course.grade }</Descriptions.Item>\r\n                                       </Descriptions>\r\n                                       <hr/>\r\n                                    </div>\r\n                                )\r\n                             }\r\n                          </>\r\n                          : <h5 className=\"text-danger\">No courses found</h5>\r\n                   }\r\n                </Modal>\r\n\r\n                {/*----MODAL : ADD STUDENT ----*/ }\r\n                <Modal\r\n                    title={ <h4>Add New Student</h4> }\r\n                    visible={ isAddStudentModalVisible }\r\n                    onOk={ this.closeAddStudentModal }\r\n                    onCancel={ this.closeAddStudentModal }\r\n                    width={ 1000 }>\r\n\r\n                   <AddStudentForm\r\n                       onSuccess={ () => {\r\n                          this.closeAddStudentModal();\r\n                          this.fetchStudents();\r\n                       } }\r\n\r\n                       onFailure={ ( error ) => {\r\n                          console.log(JSON.stringify(error));\r\n                          const message = error.error.message;\r\n                          const desc = error.error.httpStatus;\r\n                          errorNotification(message, desc);\r\n                       } }\r\n                   />\r\n                </Modal>\r\n\r\n                {/*----MODAL : EDIT STUDENT -----*/ }\r\n                <Modal\r\n                    title='Edit'\r\n                    visible={ this.state.isEditStudentModalVisible }\r\n                    destroyOnClose={true}\r\n                    onOk={ this.closeEditStudentModal }\r\n                    onCancel={ this.closeEditStudentModal }\r\n                    width={ 1000 }>\r\n\r\n                   <PageHeader title={ `${ this.state.selectedStudent.studentId }` }/>\r\n\r\n                   <EditStudentForm\r\n                       initialValues={ this.state.selectedStudent }\r\n                       submitter={ this.updateStudentFormSubmitter }/>\r\n                </Modal>\r\n\r\n                {/* FOOTER */ }\r\n                <ComponentFooter handleAddStudentClick={ this.openAddStudentModal } numberOfStudents={ students.length }/>\r\n             </div>\r\n          </>\r\n      ); // END of commonElements\r\n\r\n      // PROGRESS Bar/Spinner :\r\n      if ( isFetching ) {\r\n         return (\r\n             <div className=\"text-center mt-5\">\r\n                <Spin indicator={ getIndicatorIcon() }/>\r\n             </div>\r\n         );\r\n      }\r\n\r\n      // STUDENT TABLE: If True, return a table...\r\n      if ( students && students.length ) {\r\n         const columns = [\r\n            {\r\n               title: '',\r\n               key: 'avatar',\r\n               // to use Custom-Component(Avatar from antd)inside a column, Use 'render:'\r\n               render: ( text, student ) => (\r\n                   <Avatar size=\"large\">\r\n                      { `${ student.firstName.charAt(0).toUpperCase() }${ student.lastName.charAt(0).toUpperCase() }` }\r\n                   </Avatar>\r\n               )\r\n            },\r\n            {\r\n               title: 'Student Id',\r\n               dataIndex: 'studentId',\r\n               key: 'studentId',\r\n               render: ( text ) => (\r\n                   <Button\r\n                       type=\"link\"\r\n                       onClick={ () => this.handleOnIdClick(text) }\r\n                   >{ text }\r\n                   </Button>\r\n               )\r\n            },\r\n            {\r\n               title: 'First Name',\r\n               dataIndex: 'firstName',\r\n               key: 'firstName',\r\n            },\r\n            {\r\n               title: 'Last Name',\r\n               dataIndex: 'lastName',\r\n               key: 'lastName',\r\n            },\r\n            {\r\n               title: 'Email',\r\n               dataIndex: 'email',\r\n               key: 'email',\r\n            },\r\n            {\r\n               title: 'Gender',\r\n               dataIndex: 'gender',\r\n               key: 'gender',\r\n            },\r\n            {\r\n               title: 'Action',\r\n               key: 'action',\r\n               render: ( text, record ) => (\r\n                   <>\r\n                      <Button type=\"primary\" style={ { marginRight: 16 } }\r\n                              onClick={ () => this.editStudent(record) }\r\n                      >\r\n                         Edit\r\n                      </Button>\r\n\r\n                      <Popconfirm\r\n                          icon={ <QuestionCircleOutlined style={ { color: 'red' } }/> }\r\n                          placement='topRight'\r\n                          title={ `DELETE ID: ${ record.studentId }` }\r\n                          okText='Yes' cancelText='No'\r\n                          onConfirm={ () => this.deleteStudent(record.studentId) }\r\n                          onCancel={ e => e.stopPropagation() }\r\n                      >\r\n                         <Button danger>Delete</Button>\r\n                      </Popconfirm>\r\n                   </>\r\n               ),\r\n            },\r\n         ];\r\n\r\n         return (\r\n             <Container className=\"py-5\">\r\n                <h1 className=\"text-center\">Student Registration</h1>\r\n                <Table\r\n                    style={ { marginBottom: '100px' } }\r\n                    dataSource={ students }\r\n                    columns={ columns }\r\n                    rowKey='studentId'\r\n                    pagination={ false }/>\r\n\r\n                { commonElements() }\r\n             </Container>\r\n         );\r\n      }  // END of If-else : TABLE\r\n\r\n      // ... else, return <Empty/> component from ant.design\r\n      return (\r\n          <div>\r\n             <Empty description={\r\n                <h2>No Students Found</h2>\r\n             }/>\r\n             { commonElements() }\r\n          </div>\r\n      );\r\n\r\n   } // End render()\r\n\r\n} // End ComponentMain\r\n\r\n\r\nexport default ComponentMain\r\n","import React from 'react';\nimport './App.css';\nimport ComponentMain from \"./ComponentMain\";\n\n\nfunction App() {\n   return (\n       <div>\n          <ComponentMain/>\n       </div>\n   );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'antd/dist/antd.css';\nimport 'bootstrap/dist/css/bootstrap.min.css'\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}