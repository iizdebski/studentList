{"version":3,"sources":["Container.js","Footer.js","client.js","forms/AddStudentForm.js","Notification.js","App.js","serviceWorker.js","index.js"],"names":["Container","props","style","width","margin","textAlign","children","Footer","className","undefined","numberOfStudents","backgroundColor","marginRight","size","onClick","handleAddStudentClickEvent","type","checkStatus","response","ok","error","Error","statusText","json","then","e","Promise","reject","getAllStudents","fetch","inputBottomMargin","marginBottom","tagStyle","color","AddStudentForm","initialValues","firstName","lastName","email","gender","validate","values","errors","test","includes","onSubmit","student","setSubmitting","headers","method","body","JSON","stringify","addNewStudent","onSuccess","catch","err","onFailure","finally","touched","handleChange","handleBlur","handleSubmit","isSubmitting","submitForm","isValid","name","onChange","onBlur","value","placeholder","disabled","openNotification","message","description","notification","errorNotification","antIcon","LoadingOutlined","fontSize","spin","App","state","students","isFetching","isAddStudentModalVisible","openAddStudentModal","setState","closeAddStudentModal","fetchStudents","res","console","log","this","commonElements","title","visible","onOk","onCancel","httpStatus","length","indicator","columns","key","render","text","charAt","toUpperCase","dataIndex","dataSource","pagination","rowKey","Component","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.9f8a3d0e.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nexport const Container = props => (\r\n    <div style={{width: '1400px', margin: '0 auto', textAlign: 'center'}}>\r\n    {props.children}\r\n    </div>\r\n);\r\n\r\nexport default Container;","import React from 'react';\r\nimport Container from './Container';\r\nimport { Button, Avatar } from 'antd';\r\nimport './Footer.css';\r\n\r\nconst Footer = (props) => (\r\n    <div className='footer'>   \r\n    <Container>\r\n            {props.numberOfStudents !== undefined ?\r\n            <Avatar \r\n            style={{backgroundColor: '#f56a00', marginRight: '5px'}}            \r\n            size ='large'>{props.numberOfStudents}</Avatar> : null\r\n            }\r\n            <Button onClick={() => props.handleAddStudentClickEvent()} type='primary'>Add new student +</Button>\r\n    </Container>\r\n    </div>\r\n);\r\n\r\nexport default Footer;","import fetch from 'unfetch';\r\n\r\nconst checkStatus = response => {\r\n    if (response.ok) {\r\n        return response;\r\n    } else {\r\n        let error = new Error(response.statusText);\r\n        error.response = response;\r\n        response.json().then(e => {\r\n            error.error = e;\r\n        });\r\n             return Promise.reject(error);\r\n    }\r\n}\r\n\r\nexport const getAllStudents = () => \r\nfetch('api/students').then(checkStatus);\r\n\r\nexport const addNewStudent = student => \r\n    fetch('api/students', {\r\n        headers: {\r\n            'Content-Type': 'application/json'\r\n        },\r\n        method: 'POST',\r\n        body: JSON.stringify(student)\r\n    })\r\n    .then(checkStatus);","import React from 'react';\r\nimport { Formik } from 'formik';\r\nimport { Input, Button, Tag } from 'antd';\r\nimport { addNewStudent } from '../client';\r\n\r\nconst inputBottomMargin = {marginBottom: '10px'};\r\nconst tagStyle = {backgroundColor: '#f50', color: 'white', ...inputBottomMargin};\r\n\r\nconst AddStudentForm = (props) =>  (        \r\n     <Formik\r\n       initialValues={{ firstName: '', lastName: '', email: '', gender: '' }}\r\n       validate={values => {\r\n         const errors = {};\r\n\r\n         if (!values.firstName) {\r\n          errors.firstName = 'First Name Required'\r\n        }       \r\n\r\n        if (!values.lastName) {\r\n          errors.lastName = 'Last Name Required'\r\n        }\r\n\r\n         if (!values.email) {\r\n           errors.email = 'Email Required';\r\n         } else if (\r\n           !/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,}$/i.test(values.email)\r\n         ) {\r\n           errors.email = 'Invalid email address';\r\n         }         \r\n\r\n         if (!values.gender) {\r\n           errors.gender = \"Gender Required\"\r\n         } else if (!['MALE', 'male', 'FEMALE', 'female'].includes(values.gender)\r\n         ) {\r\n           errors.gender = 'Gender must be (MALE, male, FEMALE, female)';\r\n         }     \r\n         return errors;\r\n       }}\r\n       onSubmit={(student, { setSubmitting }) => {      \r\n         addNewStudent(student).then(() => {\r\n           props.onSuccess();                                        \r\n         })\r\n         .catch(err => {\r\n           props.onFailure(err);\r\n         })\r\n         .finally(() => {\r\n           setSubmitting(false);\r\n         })\r\n       }}>         \r\n       {({\r\n         values,\r\n         errors,\r\n         touched,\r\n         handleChange,\r\n         handleBlur,\r\n         handleSubmit,\r\n         isSubmitting,\r\n         submitForm,\r\n         isValid\r\n         /* and other goodies */\r\n       }) => (\r\n         <form onSubmit={handleSubmit}>\r\n           <Input    \r\n             style={inputBottomMargin}    \r\n             name=\"firstName\"\r\n             onChange={handleChange}\r\n             onBlur={handleBlur}\r\n             value={values.firstName}\r\n             placeholder='First name. E.g John'\r\n           />\r\n           {errors.firstName && touched.firstName && \r\n           <Tag style={tagStyle}>{errors.firstName}</Tag>}\r\n           <Input      \r\n             style={inputBottomMargin}      \r\n             name=\"lastName\"\r\n             onChange={handleChange}\r\n             onBlur={handleBlur}\r\n             value={values.lastName}\r\n             placeholder='Last name. E.g Smith'\r\n           />\r\n           {errors.lastName && touched.lastName &&\r\n           <Tag style={tagStyle}>{errors.lastName}</Tag>}\r\n           <Input   \r\n             style={inputBottomMargin}         \r\n             name=\"email\"       \r\n             onChange={handleChange}\r\n             onBlur={handleBlur}\r\n             value={values.email}\r\n             placeholder='Email. E.g example@gmail.com'\r\n           />\r\n           {errors.email && touched.email && \r\n           <Tag style={tagStyle}>{errors.email}</Tag>}      \r\n           <Input    \r\n             style={inputBottomMargin}        \r\n             name=\"gender\"          \r\n             onChange={handleChange}\r\n             onBlur={handleBlur}\r\n             value={values.gender}\r\n             placeholder='Gender. E.g Male or Female'\r\n           />\r\n           {errors.gender && touched.gender && \r\n            <Tag style={tagStyle}>{errors.gender}</Tag>}           \r\n           <Button \r\n           onClick={() => submitForm()} \r\n           type=\"submit\" \r\n           disabled={isSubmitting | (touched && !isValid)}>\r\n             Submit\r\n           </Button>\r\n         </form>\r\n       )}\r\n     </Formik>\r\n    );    \r\n\r\nexport default AddStudentForm;","import { notification } from 'antd';\r\n\r\nconst openNotification = ( type, message, description ) => {\r\n    notification[type]({\r\n      message,\r\n      description        \r\n    });\r\n  };\r\n\r\n  export const successNotification = (message, description) =>\r\n     openNotification('success', message, description);\r\n\r\n  export const infoNotification = (message, description) =>\r\n     openNotification('info', message, description);\r\n\r\n  export const warningNotification = (message, description) =>\r\n     openNotification('warning', message, description);\r\n\r\n  export const errorNotification = (message, description) =>\r\n     openNotification('error', message, description);","import React, { Component} from 'react';\nimport Container from './Container';\nimport Footer from './Footer';\nimport './App.css';\nimport { getAllStudents } from './client';\nimport AddStudentForm from './forms/AddStudentForm';\nimport { errorNotification } from './Notification';\nimport {\n  Table,\n  Avatar,\n  Spin,  \n  Modal,\n  Empty, \n} from 'antd';\nimport { \n  LoadingOutlined\n} \nfrom '@ant-design/icons';\n\nconst antIcon = <LoadingOutlined style={{ fontSize: 24 }} spin />;\n\nclass App extends Component {\n\n  state = {\n    students: [],\n    isFetching: false,\n    isAddStudentModalVisible: false\n  }\n\n  componentDidMount () {\n    this.fetchStudents();\n  }\n\n  openAddStudentModal = () => this.setState({isAddStudentModalVisible: true})\n\n  closeAddStudentModal = () => this.setState({isAddStudentModalVisible: false})\n\n  fetchStudents = () => {\n    this.setState({\n      isFetching: true\n    });\n    getAllStudents()\n    .then(res => res.json()\n    .then(students => {\n      console.log(students);\n      this.setState({\n        students,\n        isFetching: false\n      });\n    }))\n        .catch(error => {\n          console.log(error.error);\n          const message = error.error.message;\n          const description = error.error.error;\n          errorNotification(message, message);\n          this.setState({\n            isFetching: false\n          });\n        });\n  }\n\n  render() {  \n    \n    const { students, isFetching, isAddStudentModalVisible } = this.state;\n\n    const commonElements = () => (\n      <div>\n      <Modal\n       title='Add new student'      \n       visible={isAddStudentModalVisible}\n       onOk={this.closeAddStudentModal}\n       onCancel={this.closeAddStudentModal}\n       width={1000}>        \n         <AddStudentForm \n         onSuccess={() => {\n           this.closeAddStudentModal(); \n           this.fetchStudents();\n          }}\n          onFailure={(error) => {\n            const message = error.error.message;\n            const description = error.error.httpStatus;           \n            errorNotification(message, description);\n          }}\n         />\n    </Modal>\n    <Footer \n    numberOfStudents={students.length}\n    handleAddStudentClickEvent={this.openAddStudentModal}/> \n        </div>\n    )\n\n    if (isFetching) {\n      return (\n        <Container>\n        <Spin indicator={antIcon} />\n        </Container>\n      );\n    }\n\n    if (students && students.length) {      \n\n      const columns = [\n        {\n          title: '',\n          key: 'avatar',\n          render: (text, student) => (\n            <Avatar size='large'>\n            {`${student.firstName.charAt(0).toUpperCase()}${student.lastName.charAt(0).toUpperCase()}`}\n            </Avatar>\n          )\n        },        \n        {\n          title: 'Student Id',\n          dataIndex: 'studentId',\n          key: 'studentId'\n        },         \n        {\n          title: 'First Name',\n          dataIndex: 'firstName',\n          key: 'firstName'\n        },   \n        {\n          title: 'Last Name',\n          dataIndex: 'lastName',\n          key: 'lastName'\n        },   \n        {\n          title: 'Email',\n          dataIndex: 'email',\n          key: 'email'\n        },   \n        {\n          title: 'Gender',\n          dataIndex: 'gender',\n          key: 'gender'\n        }           \n      ];   \n      \n\n      return ( \n        <Container>\n      <Table \n      style={{marginBottom: '100px'}}\n      dataSource={students} \n      columns={columns} \n      pagination={false}\n      rowKey='studentId' />\n      {commonElements()}   \n      </Container>\n      );\n    }\n    \n    return (\n      <Container>    \n    <Empty description={\n      <h1>No Students found</h1>\n    }/>\n    {commonElements()}\n    </Container>\n    )\n    }\n}\n\nexport default App; ","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'antd/dist/antd.css';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}